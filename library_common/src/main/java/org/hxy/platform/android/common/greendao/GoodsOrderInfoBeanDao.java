package org.hxy.platform.android.common.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import org.hxy.platform.android.common.entity.GoodsOrderInfoBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GOODS_ORDER_INFO_BEAN".
*/
public class GoodsOrderInfoBeanDao extends AbstractDao<GoodsOrderInfoBean, Long> {

    public static final String TABLENAME = "GOODS_ORDER_INFO_BEAN";

    /**
     * Properties of entity GoodsOrderInfoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property GoodsId = new Property(0, long.class, "goodsId", true, "_id");
        public final static Property Count = new Property(1, int.class, "count", false, "COUNT");
        public final static Property Property = new Property(2, String.class, "property", false, "PROPERTY");
    }


    public GoodsOrderInfoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public GoodsOrderInfoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GOODS_ORDER_INFO_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: goodsId
                "\"COUNT\" INTEGER NOT NULL ," + // 1: count
                "\"PROPERTY\" TEXT);"); // 2: property
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GOODS_ORDER_INFO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GoodsOrderInfoBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getGoodsId());
        stmt.bindLong(2, entity.getCount());
 
        String property = entity.getProperty();
        if (property != null) {
            stmt.bindString(3, property);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GoodsOrderInfoBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getGoodsId());
        stmt.bindLong(2, entity.getCount());
 
        String property = entity.getProperty();
        if (property != null) {
            stmt.bindString(3, property);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public GoodsOrderInfoBean readEntity(Cursor cursor, int offset) {
        GoodsOrderInfoBean entity = new GoodsOrderInfoBean( //
            cursor.getLong(offset + 0), // goodsId
            cursor.getInt(offset + 1), // count
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // property
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GoodsOrderInfoBean entity, int offset) {
        entity.setGoodsId(cursor.getLong(offset + 0));
        entity.setCount(cursor.getInt(offset + 1));
        entity.setProperty(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GoodsOrderInfoBean entity, long rowId) {
        entity.setGoodsId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GoodsOrderInfoBean entity) {
        if(entity != null) {
            return entity.getGoodsId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GoodsOrderInfoBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
